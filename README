# Hobbiton Wallet Backend

This is the backend service for the Hobbiton Digital Wallet application. It provides REST APIs for user authentication and transaction management.

## Technologies Used

- Go 1.21+
- PostgreSQL
- GORM (ORM)
- JWT for authentication
- Gorilla Mux for routing

## Project Structure

```
.
├── cmd/
│   └── api/            # Application entrypoint
├── internal/
│   ├── models/         # Data models
│   ├── handlers/       # HTTP handlers
│   ├── middleware/     # HTTP middleware
│   └── database/
│       └── migrations/ # Database migrations
├── config/            # Configuration files
└── .env.example       # Environment variables template
```

## Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/your-username/hobbiton-wallet-backend.git
   cd hobbiton-wallet-backend
   ```

2. Install dependencies:

   ```bash
   go mod download
   ```

3. Create and configure the environment variables:

   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

4. Set up the database:

   ```bash
   # Create the database
   createdb hobbiton_wallet

   # Run migrations (requires golang-migrate)
  auto-migrate

5. Run the server:
   ```bash
   go run cmd/api/main.go
   ```

## API Endpoints

### Public Endpoints

- `POST /api/auth/register` - Register a new user
- `POST /api/auth/login` - Login user

### Protected Endpoints (Requires JWT Token)

- `GET /api/transactions` - Get user's transactions and balance
- `POST /api/transactions` - Create a new transaction

## Authentication

The API uses JWT for authentication. Include the token in the Authorization header:

```
Authorization: Bearer <your-token>
```

## Development

1. Make sure you have Go 1.21+ installed
2. Install PostgreSQL and create a database
3. Install golang-migrate for database migrations
4. Copy .env.example to .env and update the values
5. Run the server in development mode:
   ```bash
   go run cmd/api/main.go
   ```

## Frontend Integration

This backend is designed to work with the Hobbiton Wallet frontend. The CORS middleware is configured to allow requests from any origin in development. For production, update the CORS configuration in `main.go`.
